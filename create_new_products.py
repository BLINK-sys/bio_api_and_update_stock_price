# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—ë—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
# –ø—É—Ç—ë–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –Ω–∞ https://pospro.kz/add_product_category.php

import requests
import sqlite3
import time
from math import ceil


def fetch_products_by_codes(product_codes):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏—Ö –∞—Ä—Ç–∏–∫—É–ª–∞–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("—Å–æ–∑–¥–∞—é —Ç–æ–≤–∞—Ä")
    if not product_codes:
        return []
    
    db_path = "products.db"
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è IN –∑–∞–ø—Ä–æ—Å–∞
    placeholders = ','.join(['?' for _ in product_codes])
    cursor.execute(f"SELECT * FROM products WHERE code IN ({placeholders})", product_codes)
    rows = cursor.fetchall()

    products_data = []
    for row in rows:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º "(B)" –≤ –∫–æ–Ω—Ü–µ
        description = row["description"] if row["description"] else ""
        if description:
            description = description + "\n(B)"
        else:
            description = "(B)"
        
        products_data.append({
            "id": row["id"],
            "brand": row["brand"],
            "code": row["code"],
            "country": row["country"],
            "fullName": row["fullName"],
            "inStock": row["inStock"],
            "model": row["model"],
            "name": row["name"],
            "price": int(round(row["price"])) if row["price"] else 0,
            "priceCurrency": (
                row["priceCurrency"].replace("–£–ï ", "").replace(" –í–ù", "") if row["priceCurrency"] else "KZT"
            ),
            "img": "https://portal.holdingbio.ru" + row["img"] if row["img"] else "",
            "description": description
        })

    conn.close()
    return products_data


def group_products_by_category(products_data):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    categories_dict = {}
    
    for product in products_data:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_path = "products.db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute("SELECT category FROM products WHERE code = ?", (product["code"],))
        row = cursor.fetchone()
        category = row["category"] if row else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        conn.close()
        
        if category not in categories_dict:
            categories_dict[category] = []
        
        categories_dict[category].append(product)
    
    return categories_dict


def chunk_list(data, chunk_size):
    """–†–∞–∑–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏ (—á–∞—Å—Ç–∏) —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."""
    for i in range(0, len(data), chunk_size):
        yield data[i:i + chunk_size]


def create_products_on_server(product_codes):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    """
    if not product_codes:
        print("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
        return True
    
    print(f"üîÑ –°–æ–∑–¥–∞–µ–º {len(product_codes)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    products_data = fetch_products_by_codes(product_codes)
    if not products_data:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories_dict = group_products_by_category(products_data)
    
    success_count = 0
    total_count = len(products_data)
    
    for category_name, products in categories_dict.items():
        print(f"üìÇ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —á–∞–Ω–∫–∞–º–∏ –ø–æ 10 —à—Ç—É–∫
        for chunk in chunk_list(products, 10):
            payload = {
                "categories": [{
                    "categoryName": category_name,
                    "products": chunk
                }]
            }
            
            url = "https://pospro.kz/add_product_category.php"
            max_retries = 3
            retry_count = 0
            
            while retry_count < max_retries:
                try:
                    response = requests.post(url, json=payload, timeout=30)
                    if response.status_code == 200:
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunk)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'")
                        success_count += len(chunk)
                        break
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'")
                        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                        retry_count += 1
                        if retry_count < max_retries:
                            time.sleep(10)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                    retry_count += 1
                    if retry_count < max_retries:
                        time.sleep(10)
            
            if retry_count == max_retries:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
            
            time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
    
    print(f"üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    return success_count == total_count


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_codes = ["157687", "9590"]  # –¢–µ—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
    create_products_on_server(test_codes)

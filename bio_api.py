# –¢—É—Ç –∏–¥—ë—Ç –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Bio  –ø–æ API  –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É (—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ü–µ–Ω –ø–æ —Ñ–æ—Ä–º—É–ª–µ)
import math
import sys
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Render
os.environ.setdefault("PYTHONUNBUFFERED", "1")
os.environ.setdefault("PYTHONIOENCODING", "UTF-8")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render
logging.basicConfig(
    level=logging.INFO,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å DEBUG –Ω–∞ INFO
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
    force=True,  # —Å–±—Ä–æ—Å–∏—Ç—å —á—É–∂–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, werkzeug)
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3.connectionpool").setLevel(logging.WARNING)
logging.getLogger("requests.packages.urllib3").setLevel(logging.WARNING)

log = logging.getLogger("bio")

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
log.info("üöÄ BIO API –∑–∞–ø—É—â–µ–Ω")

import requests
import sqlite3
import json
from flask import Flask, jsonify
import info
import valute
import schedule
import time
import threading
import subprocess
from datetime import datetime

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª—è
# –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω

app = Flask(__name__)

BASE_URL = "http://api.bioshop.ru:8030"
AUTH_CREDENTIALS = {
    "login": "dilyara@pospro.kz",
    "password": "qo8qe7ti"
}

DB_PATH = "products.db"

# –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
valute.valute()
# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
import importlib
importlib.reload(info)
log.info(f"üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: {info.exchange_rates}")

# –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã BIO
import valute_bio
valute_bio.get_bio_rates()
log.info("üí± –ö—É—Ä—Å—ã BIO –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


def calculate_delivery_cost(weight_kg, volume_m3):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –≤–µ—Å–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    weight_kg - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—Å –≤ –∫–≥
    volume_m3 - –æ–±—ä–µ–º –≤ –º¬≥
    """
    # –û–±—ä–µ–º–Ω—ã–π –≤–µ—Å = –æ–±—ä–µ–º * 200
    volumetric_weight = volume_m3 * 200
    
    # –í—ã–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–∏–π –≤–µ—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    delivery_weight = max(weight_kg, volumetric_weight)
    
    if delivery_weight <= 30:
        # –î–æ 30 –∫–≥: 7500 + 10000 + (26*400) + 4000 = 31,900 —Ç–≥
        return 31900
    elif delivery_weight <= 300:
        # 30-300 –∫–≥: 7500 + (–≤–µ—Å-30)*179 + 10000 + (–≤–µ—Å-30)*20 + 26*400 + 4000 + (–≤–µ—Å-30)*15
        excess_weight = delivery_weight - 30
        return 7500 + (excess_weight * 179) + 10000 + (excess_weight * 20) + 10400 + 4000 + (excess_weight * 15)
    elif delivery_weight <= 1000:
        # 300-1000 –∫–≥: —Å—É–º–º–∞ —Ç—Ä–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        excess_300 = delivery_weight - 300
        excess_1000 = max(0, delivery_weight - 1000)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 1: –≥–æ—Ä–æ–¥+–≥–æ—Ä–æ–¥
        component1 = 7500 + (270 * 179) + (excess_300 * 164) + (excess_1000 * 143)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2: –∑–∞–±–æ—Ä —Å–∫–ª–∞–¥ –ë–ò–û
        component2 = 10000 + (270 * 20) + (excess_300 * 15) + excess_1000 + 10400
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ê—Å—Ç–∞–Ω–µ
        component3 = 4000 + (270 * 15) + (excess_300 * 2) + (excess_1000 * 9) + 10400
        
        return component1 + component2 + component3
    else:
        # –°–≤—ã—à–µ 1000 –∫–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –¥–ª—è 1000 –∫–≥ (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)
        excess_300 = 700  # 1000 - 300
        excess_1000 = 0   # 1000 - 1000 = 0
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 1: –≥–æ—Ä–æ–¥+–≥–æ—Ä–æ–¥
        component1 = 7500 + (270 * 179) + (excess_300 * 164) + (excess_1000 * 143)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2: –∑–∞–±–æ—Ä —Å–∫–ª–∞–¥ –ë–ò–û
        component2 = 10000 + (270 * 20) + (excess_300 * 15) + excess_1000 + 10400
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ê—Å—Ç–∞–Ω–µ
        component3 = 4000 + (270 * 15) + (excess_300 * 2) + (excess_1000 * 9) + 10400
        
        return component1 + component2 + component3


def calculate_volume_from_dimensions(size_gross):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º –∏–∑ –≥–∞–±–∞—Ä–∏—Ç–æ–≤
    size_gross - —Å—Ç—Ä–æ–∫–∞ —Å –≥–∞–±–∞—Ä–∏—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î—Ö–®—Ö–í" (–º–º)
    """
    if not size_gross or size_gross == "0":
        return 0
    
    try:
        # –ó–∞–º–µ–Ω—è–µ–º "—Ö" –Ω–∞ "x" –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ "x"
        dimensions = size_gross.lower().replace("—Ö", "x").split("x")
        if len(dimensions) != 3:
            return 0
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–µ—Ç—Ä—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º
        width, height, depth = map(lambda x: float(x) / 1000, dimensions)
        volume = width * height * depth
        return volume
    except (ValueError, IndexError):
        return 0


def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        category TEXT,
        brand TEXT,
        code TEXT UNIQUE,
        country TEXT,
        dilerCurrency TEXT,
        dilerPrice REAL,
        fullName TEXT,
        inStock INTEGER,
        model TEXT,
        name TEXT,
        price REAL,
        priceCurrency TEXT,
        inReserve INTEGER,
        img TEXT,
        sizeNet TEXT,
        sizeGross TEXT,
        description TEXT
    )
    """)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–æ–≤—ã—Ö
    cursor.execute("DELETE FROM products")
    log.info("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã")
    
    conn.commit()
    conn.close()


def save_product_to_db(product):
    global cost
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
    exchange_rates = info.exchange_rates
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã BIO –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª–∏
    try:
        import bio_rates
        bio_rates_dict = bio_rates.bio_rates
    except ImportError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª bio_rates.py –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        bio_rates_dict = {'EUR': 109.0, 'USD': 93.0}

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    price_currency = product.get("priceCurrency", "RUB").replace("–£–ï ", "").replace(" –í–ù", "").replace(" 1.5", "")
    original_price = product.get("dilerPrice", 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –∏ –≥–∞–±–∞—Ä–∏—Ç—ã
    weight_gross = product.get("weightGross", 0)
    size_gross = product.get("sizeGross", "0—Ö0—Ö0")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    has_weight = weight_gross and weight_gross > 0
    has_dimensions = size_gross and size_gross != "0—Ö0—Ö0" and size_gross != "0"
    
    if not has_weight or not has_dimensions:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
        price = 0
        price_currency = "KZT"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        product_name = product.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        product_code = product.get("code", "–ù–µ—Ç –∫–æ–¥–∞")
        
        with open("–¢–æ–≤–∞—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤.txt", "a", encoding="utf-8") as file:
            if not has_weight and not has_dimensions:
                file.write(f"–¢–æ–≤–∞—Ä: {product_name} (–∫–æ–¥: {product_code}) - –Ω–µ—Ç –≤–µ—Å–∞ –∏ –≥–∞–±–∞—Ä–∏—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n")
            elif not has_weight:
                file.write(f"–¢–æ–≤–∞—Ä: {product_name} (–∫–æ–¥: {product_code}) - —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É –ë–ò–û - –Ω–µ—Ç –≤–µ—Å–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n")
            else:
                file.write(f"–¢–æ–≤–∞—Ä: {product_name} (–∫–æ–¥: {product_code}) - —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É –ë–ò–û - –Ω–µ—Ç –≥–∞–±–∞—Ä–∏—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n")
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º
        volume = calculate_volume_from_dimensions(size_gross)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = calculate_delivery_cost(weight_gross, volume)
        
        # –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:
        # –≠—Ç–∞–ø 1: BIO –∫—É—Ä—Å—ã (EUR/USD -> RUB)
        # –≠—Ç–∞–ø 2: –ú–ò–ì –∫—É—Ä—Å—ã (RUB -> KZT)
        
        if price_currency in ['EUR', 'USD']:
            # –≠—Ç–∞–ø 1: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏ –ø–æ –∫—É—Ä—Å–∞–º BIO
            price_in_rubles = original_price * bio_rates_dict.get(price_currency, 1)
            # –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ —Ç–µ–Ω–≥–µ –ø–æ –∫—É—Ä—Å–∞–º –ú–ò–ì
            price_in_tenge = price_in_rubles * exchange_rates.get('RUB', 1)
        else:
            # –ï—Å–ª–∏ —É–∂–µ –≤ —Ä—É–±–ª—è—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–Ω–≥–µ
            price_in_tenge = original_price * exchange_rates.get(price_currency, 1)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É: (X/1.2*1.12+–¥–æ—Å—Ç–∞–≤–∫–∞)*1.18
        converted_price = price_in_tenge / 1.2 * 1.12
        converted_price = converted_price + delivery_cost
        converted_price = converted_price * 1.18
        
        price = int(round(converted_price))
        price_currency = "KZT"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
    cursor.execute("SELECT id FROM products WHERE code = ?", (product.get("code"),))
    if cursor.fetchone() is None:
        cursor.execute("""
        INSERT INTO products (category, brand, code, country, dilerCurrency, dilerPrice,
                              fullName, inStock, model, name, price, priceCurrency, inReserve, img, 
                              sizeNet, sizeGross, description)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            product.get("category"),
            product.get("brand"),
            product.get("code"),
            product.get("country"),
            product.get("dilerCurrency"),
            product.get("dilerPrice"),
            product.get("fullName"),
            product.get("inStock"),
            product.get("model"),
            product.get("name"),
            price,
            price_currency,
            product.get("inReserve"),
            product.get("img"),
            product.get("sizeNet", ""),
            product.get("sizeGross", ""),
            product.get("description", "")
        ))

    conn.commit()
    conn.close()


def fetch_categories():
    url = f"{BASE_URL}/categories"
    try:
        response = requests.post(url, json=AUTH_CREDENTIALS, timeout=30)
        response.raise_for_status()
        categories_data = response.json()
        log.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories_data) if isinstance(categories_data, list) else '–æ—à–∏–±–∫–∞'}")
        return categories_data
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return {"error": str(e)}


def fetch_products_by_category(category_id):
    url = f"{BASE_URL}/products"
    payload = {**AUTH_CREDENTIALS, "categoryId": category_id}
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        products_data = response.json()
        return products_data
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {e}")
        return {"error": str(e)}


def fetch_product_details(product_code):
    url = f"{BASE_URL}/product"
    payload = {**AUTH_CREDENTIALS, "code": product_code}
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        data = response.json()
        return data
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {product_code}: {e}")
        return {}


@app.route('/products', methods=['GET'])
def get_all_products():
    start_time = datetime.now()
    log.info("üöÄ –°–¢–ê–†–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò–ó –ë–ò–û")
    
    init_db()

    categories_response = fetch_categories()
    if "error" in categories_response:
        log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return jsonify(categories_response), 500

    total_products = 0
    
    for category_group in categories_response:
        categories = category_group.get("categories", [])
        for category in categories:
            category_id = category.get("id")
            category_name = category.get("name", "Unknown Category")
            if category_id:
                products = fetch_products_by_category(category_id)
                if isinstance(products, list):
                    for product in products:
                        product["category"] = category_name

                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                        product_details = fetch_product_details(product.get("code"))
                        if isinstance(product_details, dict):
                            product["description"] = product_details.get("description", "")
                            product["sizeNet"] = product_details.get("sizeNet", "")
                            product["sizeGross"] = product_details.get("sizeGross", "")
                            product["weightGross"] = product_details.get("weightGross", 0)
                            product["weightNet"] = product_details.get("weightNet", 0)

                        save_product_to_db(product)
                        total_products += 1
    
    end_time = datetime.now()
    duration = end_time - start_time
    log.info(f"‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ë–ò–û –ó–ê–í–ï–†–®–ï–ù–û. –¢–æ–≤–∞—Ä–æ–≤: {total_products}, –í—Ä–µ–º—è: {duration}")

    return jsonify({"message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É", "total_products": total_products})


def run_update_stocks_script():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    start_time = datetime.now()
    log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç update_stocks_bio.py —Å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º –≤—ã–≤–æ–¥–∞
        proc = subprocess.Popen(
            ['python', '-u', 'update_stocks_bio.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            encoding='utf-8',
            errors='replace',
            bufsize=1,
            cwd=os.getcwd()
        )
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
        for line in proc.stdout:
            log.info("update_stocks | %s", line.rstrip())
        
        rc = proc.wait()
        end_time = datetime.now()
        duration = end_time - start_time
        
        if rc == 0:
            log.info("‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
            log.info(f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
        else:
            log.error("‚ùå –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º %s", rc)
            log.error(f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –æ—à–∏–±–∫–∏: {duration}")
            
    except Exception as e:
        end_time = datetime.now()
        duration = end_time - start_time
        log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        log.error(f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –æ—à–∏–±–∫–∏: {duration}")
        log.exception("‚ùå –û—à–∏–±–∫–∞: %s", e)


def scheduled_data_update():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ 01:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç–∞
    """
    start_time = datetime.now()
    log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        valute.valute()
        importlib.reload(info)
        log.info(f"üí± –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {info.exchange_rates}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        log.info("üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        categories_response = fetch_categories()
        if "error" in categories_response:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_response['error']}")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        log.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
        total_products = 0
        
        for category_group in categories_response:
            categories = category_group.get("categories", [])
            for category in categories:
                category_id = category.get("id")
                category_name = category.get("name", "Unknown Category")
                if category_id:
                    products = fetch_products_by_category(category_id)
                    if isinstance(products, list):
                        for product in products:
                            product["category"] = category_name

                            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                            product_details = fetch_product_details(product.get("code"))
                            if isinstance(product_details, dict):
                                product["description"] = product_details.get("description", "")
                                product["sizeNet"] = product_details.get("sizeNet", "")
                                product["sizeGross"] = product_details.get("sizeGross", "")
                                product["weightGross"] = product_details.get("weightGross", 0)
                                product["weightNet"] = product_details.get("weightNet", 0)

                            save_product_to_db(product)
                            total_products += 1
        
        log.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É. –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤...")
        run_update_stocks_script()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        end_time = datetime.now()
        duration = end_time - start_time
        log.info("üéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
        log.info(f"üéâ –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
        log.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        
    except Exception as e:
        end_time = datetime.now()
        duration = end_time - start_time
        log.error("‚ùå –û–®–ò–ë–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø!")
        log.error(f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –æ—à–∏–±–∫–∏: {duration}")
        log.exception("‚ùå –û—à–∏–±–∫–∞: %s", e)


def start_scheduler():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    def run_scheduler():
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 1 —É—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç–∞ (UTC+1)
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤ UTC, —Ç–æ —ç—Ç–æ 0:00 UTC (–ø–æ–ª–Ω–æ—á—å)
        schedule.every().day.at("00:00").do(scheduled_data_update)
        
        log.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 00:00 UTC")
        log.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now()}")
        log.info(f"‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {time.tzname}")
        
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    log.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")


if __name__ == '__main__':
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        log.info("üéØ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø BIO API")
        log.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        try:
            log.info("‚úÖ requests –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            log.info("‚úÖ sqlite3 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            log.info("‚úÖ flask –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            log.info("‚úÖ schedule –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        start_scheduler()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        log.info("üöÄ –°–¢–ê–†–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò–ó –ë–ò–û")
        scheduled_data_update()
        
        # –î–ª—è Background Worker Flask —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        # app.run(debug=False, host='0.0.0.0', port=5000)
        
        # –î–ª—è Background Worker –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
        log.info("üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ (Background Worker)")
        while True:
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
    except Exception as e:
        log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: %s", e)
        log.exception("‚ùå Traceback:")
